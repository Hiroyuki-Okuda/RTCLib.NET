<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RTCLib</name>
    </assembly>
    <members>
        <member name="T:RTCLib.Comm.UdpBinaryReceiver`1">
            <summary>
            Receive binary struct through UDP
            </summary>
            <typeparam name="T">Struct type to receive</typeparam>
        </member>
        <member name="P:RTCLib.Comm.UdpBinaryReceiver`1.LastReceived">
            <summary>
            Data received last time
            </summary>
        </member>
        <member name="P:RTCLib.Comm.UdpBinaryReceiver`1.IsDataAvailable">
            <summary>
            Validity of LastReceived data; 
            </summary>
        </member>
        <member name="T:RTCLib.Comm.UdpBinaryReceiver`1.ReceivedBytesHandler">
            <summary>
            Handler on the data receive
            </summary>
            <param name="receivedData">Received data structure</param>
        </member>
        <member name="E:RTCLib.Comm.UdpBinaryReceiver`1.OnDataReceived">
            <summary>
            Event on receiving binary data
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryReceiver`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryReceiver`1.Open(System.Int32)">
            <summary>
            UDPの受信ポートを指定して開く
            </summary>
            <param name="localPort">UDP受信を受け付けるポート番号</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryReceiver`1.Close">
            <summary>
            Close socket
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryReceiver`1.Get">
            ターゲットになる構造体かクラスを
            そのままバイナリイメージで送信する
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryReceiver`1.Finalize">
            <inheritdoc />
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryReceiver`1.Dispose(System.Boolean)">
            <summary>
            Disposable pattern
            </summary>
            <param name="disposing">flag</param>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryReceiver`1.Dispose">
            <summary>
            Disposable pattern
            </summary>
        </member>
        <member name="T:RTCLib.Comm.UdpBinarySender`1">
            <summary>
            Send binary struct through Udp
            </summary>
            <typeparam name="T">Type to send</typeparam>
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.#ctor">
            <summary>
            Construct without open
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.#ctor(System.String,System.Int32)">
            <summary>
            Construct with open 
            </summary>
            <param name="remoteHost"></param>
            <param name="remotePort"></param>
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.#ctor(System.Net.IPEndPoint)">
            <summary>
            Construct with open 
            </summary>
            <param name="remoteEndPoint">Remote endpoint(IPAddress+Port) to send</param>
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.Close">
            <summary>
            Closing socket
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.Send(`0)">
            ターゲットになる構造体かクラスを
            そのままバイナリイメージで送信する
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.Finalize">
            <inheritdoc />
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.Dispose(System.Boolean)">
            <summary>
            Disposable pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RTCLib.Comm.UdpBinarySender`1.Dispose">
            <summary>
            Disposable pattern
            </summary>
        </member>
        <member name="T:RTCLib.Comm.UdpBinaryTransceiver`1">
            <summary>
            Receive binary struct through UDP
            </summary>
            <typeparam name="T">Struct type to receive</typeparam>
        </member>
        <member name="P:RTCLib.Comm.UdpBinaryTransceiver`1.LastReceived">
            <summary>
            Data received last time
            </summary>
        </member>
        <member name="P:RTCLib.Comm.UdpBinaryTransceiver`1.IsDataAvailable">
            <summary>
            Validity of LastReceived data; 
            </summary>
        </member>
        <member name="T:RTCLib.Comm.UdpBinaryTransceiver`1.ReceivedBytesHandler">
            <summary>
            Handler on the data receive
            </summary>
            <param name="receivedData">Received data structure</param>
        </member>
        <member name="E:RTCLib.Comm.UdpBinaryTransceiver`1.OnDataReceived">
            <summary>
            Event on receiving binary data
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.#ctor(System.Net.IPEndPoint,System.Int32,System.Net.IPAddress)">
            <summary>
            Open Udp client 
            </summary>
            <param name="hostToSend">remote host to send including the port.
            use broadcast for broadcasting to all hosts</param>
            <param name="localPort">UDP port number to listen</param>
            <param name="hostToListen">Remote host to listen. Use IPAddress.Any or use default if you listen any host.</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress)">
            <summary>
            Open Udp client 
            </summary>
            <param name="remoteIp">Remote IP to send</param>
            <param name="remotePort">Remote port to send</param>
            <param name="localPort">Receive port to listen</param>
            <param name="hostToListen">Remote host to listen. Use IPAddress.Any or use default if you listen any host.</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.Close">
            <summary>
            Close socket and initialize
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.Send(`0)">
            <summary>
            Send structure data by binary send
            </summary>
            <param name="target">data to send</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.Get">
            ターゲットになる構造体かクラスを
            そのままバイナリイメージで送信する
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.Finalize">
            <inheritdoc />
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.Dispose(System.Boolean)">
            <summary>
            Disposable pattern
            </summary>
            <param name="disposing">flag</param>
        </member>
        <member name="M:RTCLib.Comm.UdpBinaryTransceiver`1.Dispose">
            <summary>
            Disposable pattern
            </summary>
        </member>
        <member name="T:RTCLib.Comm.UdpByteReceiver">
            <summary>
            Binary data receiver through Udp
            </summary>
        </member>
        <member name="T:RTCLib.Comm.UdpByteReceiver.ReceivedBytesHandler">
            <summary>
            Handler on the data gram receive
            </summary>
            <param name="dataBytes"></param>
        </member>
        <member name="E:RTCLib.Comm.UdpByteReceiver.OnBytesReceived">
            <summary>
            Event on receiving binary data
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.#ctor(System.Int32)">
            <summary>
            Constructor with open port
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructor with listening port / remote host
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.#ctor(System.String,System.Int32)">
            <summary>
            Constructor with listening port / remote host
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.Open(System.Int32)">
            <summary>
            Open udpClient and listen for the port from 'any host'
            </summary>
            <param name="localPort">listening port</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.Open(System.Net.IPAddress,System.Int32)">
            <summary>
            Open udpClient and listen for the port from directed host
            </summary>
            <param name="remoteHost">Remote host to listen. Use IPAddress.Any if you listen to any host</param>
            <param name="localPort">listening port</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.Open(System.String,System.Int32)">
            <summary>
            Open udpClient and listen for the port from directed host
            </summary>
            <param name="remoteHost">Remote host to listen. Use IPAddress.Any if you listen to any host</param>
            <param name="localPort">listening port</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.Close">
            <summary>
            Closing socket
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.ClearBuffer">
            <summary>
            Clear buffer
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.GetAllData">
            <summary>
            Get all received data
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.GetAvailableDataCount">
            <summary>
            Get available data packets count
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.GetData(System.Int32)">
            <summary>
            n番目のデータを返す
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.Dispose(System.Boolean)">
            <summary>
            Disposable pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.Dispose">
            <summary>
            Disposable pattern
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteReceiver.Finalize">
            <inheritdoc />
        </member>
        <member name="T:RTCLib.Comm.UdpByteSender">
            <summary>
            Send binary data through UDP
            </summary>
        </member>
        <member name="E:RTCLib.Comm.UdpByteSender.SendCompleted">
            <summary>
            Callback action on completing data sending
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="remoteHost">Name or IP address of remote host to send</param>
            <param name="remotePort">Port number to send</param>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.#ctor(System.Net.IPEndPoint)">
            <summary>
            Constructor
            </summary>
            <param name="remoteEndPoint">Remote host to send</param>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Open(System.String,System.Int32)">
            <summary>
            Open UDP connection
            </summary>
            <param name="remoteHost">Remote IP address to send</param>
            <param name="remotePort">Remote port to send</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Open(System.Net.IPEndPoint)">
            <summary>
            Open Udp connection
            </summary>
            <param name="remoteEndpoint">Remote endpoint to send</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Close">
            <summary>
            Close socket if opened
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Send(System.Byte[])">
            <summary>
            Send data packet synchronously 
            </summary>
            <param name="messageBytes"></param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Send data packet synchronously
            </summary>
            <param name="messageBytes"></param>
            <param name="sendTo"></param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.SendAsync(System.Byte[])">
            <summary>
            Send data packet asynchronously
            </summary>
            <param name="messageBytes">Data to send</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.SendAsync(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Send data packet asynchronously
            </summary>
            <param name="messageBytes">Data to send</param>
            <param name="sendTo">Remote host to send</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.OnSendCompleted">
            <summary>
            Event invoker
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Dispose(System.Boolean)">
            <summary>
            Disposable pattern
            </summary>
            <param name="disposing">flag</param>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Dispose">
            <summary>
            Disposable pattern
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpByteSender.Finalize">
            <inheritdoc />
        </member>
        <member name="T:RTCLib.Comm.UdpParameterReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:RTCLib.Comm.UdpParameterReceiver.Param">
            <summary>
            
            </summary>
        </member>
        <member name="F:RTCLib.Comm.UdpParameterReceiver._udp">
            local port
        </member>
        <member name="F:RTCLib.Comm.UdpParameterReceiver._remoteEp">
            udp client
        </member>
        <member name="F:RTCLib.Comm.UdpParameterReceiver._receiveBuffer">
            endpoint
        </member>
        <member name="F:RTCLib.Comm.UdpParameterReceiver.IsAlive">
            <summary>
            async receive is alive
            </summary>
        </member>
        <member name="F:RTCLib.Comm.UdpParameterReceiver.IsTerminating">
            <summary>
            for termination;
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpParameterReceiver.Open(System.Int32)">
            <summary>
            Open UDP
            </summary>
            <param name="localPort">Sending local port</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpParameterReceiver.StartReceiving">
            <summary>
            
            </summary>
        </member>
        <member name="M:RTCLib.Comm.UdpParameterReceiver.StopReceiving">
            <summary>
            
            </summary>
        </member>
        <member name="T:RTCLib.Comm.UdpParameterSender">
            <summary>
            UDP Parameter sender
            </summary>
            Send the parameter by UDP,
            No dependability, but simple.
            Sending data is:
            All data should be ascii, printable code.
            Each command is separated by "\n".
            Each command contains "Key" and "Data".
            "Key" and "Data" are separated by ":"
            Key is parameter name, data is value.
            This class doesnt support type conversion, 
            only sending string is supported.
        </member>
        <member name="F:RTCLib.Comm.UdpParameterSender.remote_host">
            local port
        </member>
        <member name="F:RTCLib.Comm.UdpParameterSender.rmt_port">
            remote host to deliver parameter
        </member>
        <member name="M:RTCLib.Comm.UdpParameterSender.Open(System.String,System.Int32,System.Int32)">
            <summary>
            Open Udp socket
            </summary>
            <param name="remoteHost"></param>
            <param name="remotePort"></param>
            <param name="localPort"></param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpParameterSender.Send(System.String,System.String)">
            <summary>
            Send pair of key and data
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Comm.UdpParameterSender.Finalize">
            <inheritdoc />
        </member>
        <member name="T:RTCLib.Fio.CsvReader">
            <summary>
            Fast CSV reader for proper format
            </summary>
            This class is applicable for 
            number(double) only CSV file with proper header.
            This class do no error check 
            to maintain the fast speed reading.
             
            Blank cell is loaded as "NaN".
            
        </member>
        <member name="F:RTCLib.Fio.CsvReader.Data">
            <summary>
            Loaded data
            </summary>
        </member>
        <member name="F:RTCLib.Fio.CsvReader.Tags">
            <summary>
            Dictionary of index with tags
            </summary>
        </member>
        <member name="P:RTCLib.Fio.CsvReader.IsHeaderLoaded">
            <summary>
            If data is loaded with tags or not;
            </summary>
        </member>
        <member name="F:RTCLib.Fio.CsvReader.SkipLine">
            <summary>
            Skipping lines, 0 = normal, 1 : every two rows
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.SetDelimiter(System.Char)">
            <summary>
            set delimiters
            </summary>
            <param name="delim">delimiter</param>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.SetDelimiter(System.Char[])">
            <summary>
            set delimiters
            </summary>
            <param name="delim"></param>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.ClearData">
            <summary>
            Clear loaded data
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.Open(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Open csv file and read it
            </summary>
            <param name="fileName">file name to open</param>
            <param name="numOfHeaderRows">
            number of header lines. 
            last line is used as tags of columns
            </param>
            <param name="encoding">Text encoding</param>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.Open(System.IO.StreamReader,System.Int32,System.Text.Encoding)">
            <summary>
            Open csv file and read it
            </summary>
            <param name="streamReader">text stream to open</param>
            <param name="numOfHeaderRows">
            number of header lines. 
            last line is used as tags of columns
            </param>
            <param name="encoding">Text encoding</param>
            <exception cref="T:System.ArgumentNullException">streamReader is null</exception>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.OpenImple(System.IO.StreamReader,System.Int32)">
            <summary>
            Implement of open csv
            </summary>
            <param name="sr">stream reader</param>
            <param name="numOfHeaderRows">index of tags line</param>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.ParseTags(System.String)">
            <summary>
            parse tags
            </summary>
            <param name="tagLine"></param>
        </member>
        <member name="P:RTCLib.Fio.CsvReader.Item(System.Int32)">
            <summary>
            indexer for row data
            </summary>
            <param name="index">index of row to access</param>
            <returns>double array of directed row</returns>
        </member>
        <member name="P:RTCLib.Fio.CsvReader.Item(System.Int32,System.Int32)">
            <summary>
            indexer for element
            </summary>
            <param name="row">index of row to access</param>
            <param name="col">index of column to access</param>
            <returns>value of (row, col)</returns>
        </member>
        <member name="P:RTCLib.Fio.CsvReader.Item(System.Int32,System.String)">
            <summary>
            Indexer to access cell with row and tags
            </summary>
            <param name="row">index of row to access</param>
            <param name="tag">tag name of column to access</param>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.IsTagExisting(System.String)">
            <summary>
            Check the directed tag exists or not
            </summary>
            <param name="key">tag to find</param>
            <returns></returns>
        </member>
        <member name="P:RTCLib.Fio.CsvReader.IsDataLoaded">
            <summary>
            Return true if the data is loaded
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.GetIndexOfTag(System.String)">
            <summary>
            Get column index of targeting tag
            </summary>
            <param name="key">tag name to get its index</param>
            <returns>index of column</returns>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.GetColumn(System.Int32)">
            <summary>
            Getting column vector
            </summary>
            <param name="col">targeting column number</param>
            <returns>column data by double array</returns>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.GetColumn(System.String)">
            <summary>
            Getting column vector
            </summary>
            <param name="tag">Tag name to get</param>
            <returns>column data by double array</returns>
        </member>
        <member name="P:RTCLib.Fio.CsvReader.Rows">
            <summary>
            Return number of rows
            </summary>
            <returns>num of rows</returns>
        </member>
        <member name="M:RTCLib.Fio.CsvReader.Cols(System.Int32)">
            <summary>
            Get number of columns
            </summary>
            <param name="rowIndex">Row index to check.</param>
            <returns>
            The number of columns in the row.
            Number of columns can be different for each rows
            for Jagged array
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:RTCLib.Fio.CsvWriter`1" -->
        <member name="M:RTCLib.Fio.CsvWriter`1.SetDelimiter(System.String)">
            <summary>
            Set delimiter. default is ','．
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.RegField``1(System.Func{`0,``0},System.String)">
            <summary>
            Register member accessor for embedded type to output 
            </summary>
            <typeparam name="T">Field type</typeparam>
            <param name="accessor">Lambda to access member variable</param>
            <param name="label">_label for member variable</param>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.RegFieldArray``1(System.Func{`0,``0[]},System.Int32,System.String)">
            <summary>
            Register array member for embedded type to output 
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.RegFieldClass``1(System.Action{RTCLib.Fio.CsvWriter{``0}},System.Func{`0,``0},System.String)">
            <summary>
            Register member for class/struct to output
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.RegFieldClassArray``1(System.Action{RTCLib.Fio.CsvWriter{``0}},System.Func{`0,``0[]},System.Int32,System.String)">
            <summary>
            Register array member for class/struct to output
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OutputHeader(System.Text.StringBuilder@)">
            <summary>
            Output CSV tags as a header to StringBuilder
            </summary>
            <param name="sb">targeting StringBuilder</param>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.GetHeaderString">
            <summary>
            Get CSV header string
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OutputHeader(System.IO.StreamWriter@)">
            <summary>
            Output headers for StreamWriter
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OutputOneRowData(System.Text.StringBuilder@,`0)">
            <summary>
            Output target data to StringBuilder as one-line string
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.GetOneRowString(`0)">
            <summary>
            Get a line string of target data
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OutputOneRowData(`0,System.IO.StreamWriter@)">
            <summary>
            Output one data row for StreamWriter
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OutputAllData``1(System.Text.StringBuilder@,``0)">
            <summary>
            Output all data in collection to StringBuilder
            </summary>
            <typeparam name="TListType">Collection type (with IEnumerable&lt;BaseType&gt;)</typeparam>
            <param name="sb">StringBuilder to output</param>
            <param name="lt">Collection of target data type(TBaseType)</param>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OutputAllData``1(System.IO.StreamWriter@,``0)">
            <summary>
            Output all data in collection to StreamWriter
            </summary>
            Write all data to StreamWriter to make CSV file
            
            <typeparam name="TListType">Collection type (with IEnumerable&lt;BaseType&gt;)</typeparam>
            <param name="streamWriter">StreamWriter to output</param>
            <param name="lt">Collection of target data type(TBaseType)</param>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OutputAllData``1(``0)">
            <summary>
            Output all data in collection to default StreamWriter 
            </summary>
            Write all data to StreamWriter to make CSV file
            
            <typeparam name="TListType">Collection type (with IEnumerable&lt;BaseType&gt;)</typeparam>
            <param name="lt">Collection of target data type(TBaseType)</param>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.SetStream(System.IO.Stream)">
            <summary>
            Set stream to output
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.OpenFileStream(System.String)">
            <summary>
            Open output stream 
            </summary>
        </member>
        <member name="T:RTCLib.Fio.CsvWriter`1.Accessor`2">
            -------------- 以下内部・非公開部分 ---------------------
            Accessor delegate
        </member>
        <member name="F:RTCLib.Fio.CsvWriter`1._delimiter">
            Delimiter to output
        </member>
        <member name="F:RTCLib.Fio.CsvWriter`1._prefix">
            Prefix
        </member>
        <member name="F:RTCLib.Fio.CsvWriter`1._accList">
            アクセッサの集合
        </member>
        <member name="F:RTCLib.Fio.CsvWriter`1._streamWriter">
            ストリームも保持しておきましょう
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.ConvertNumberedString(System.String,System.Int32)">
            <summary>
            Numbered string from # template
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.ExtendNumberedString(System.String,System.Int32)">
            <summary>
            Numbered string from # template
            </summary>
        </member>
        <member name="T:RTCLib.Fio.CsvWriter`1.CsvAccessorBase">
            <summary>
            Accessor interface
            </summary>
            <remarks>Consider use interface instead of abstract class</remarks>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessor`1.#ctor(RTCLib.Fio.CsvWriter{`0},System.Func{`0,`1},System.String)">
            <summary>
            Create an accessor with label
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessor`1.GetLabel">
            <summary>
            Get label
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessor`1.GetString(`0,System.Text.StringBuilder@,System.String)">
            <summary>
            Get string converted from data
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorArray`1.#ctor(RTCLib.Fio.CsvWriter{`0},System.Func{`0,`1[]},System.Int32,System.String)">
            <summary>
            Create accessor for array 
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorArray`1.GetLabel">
            Get label
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorArray`1.GetString(`0,System.Text.StringBuilder@,System.String)">
            <summary>
            Get string converted from data
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorClass`1.#ctor(RTCLib.Fio.CsvWriter{`0},RTCLib.Fio.CsvWriter{`1},System.Func{`0,`1},System.String)">
            <summary>
            Create accessor to class/struct data
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorClass`1.GetLabel">
            Get label
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorClass`1.GetString(`0,System.Text.StringBuilder@,System.String)">
            <summary>
            Get string converted from data
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorClassArray`1.#ctor(RTCLib.Fio.CsvWriter{`0},RTCLib.Fio.CsvWriter{`1}[],System.Func{`0,`1[]},System.Int32,System.String)">
            <summary>
            Create accessor to array of class/struct 
            </summary>
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorClassArray`1.GetLabel">
            Get label extending template
        </member>
        <member name="M:RTCLib.Fio.CsvWriter`1.CsvAccessorClassArray`1.GetString(`0,System.Text.StringBuilder@,System.String)">
            <summary>
            Get string converted from data
            </summary>
        </member>
        <member name="T:RTCLib.Sys.Interop">
            <summary>
            Marshaling utilities
            </summary>
        </member>
        <member name="M:RTCLib.Sys.Interop.StructureToBytes``1(``0)">
            <summary>
            Convert structure to binary data
            </summary>
            <param name="target">target instance</param>
            <typeparam name="T">target type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RTCLib.Sys.Interop.BytesToStructure``1(System.Byte[])">
            <summary>
            Convert binary data to structure
            </summary>
            <param name="target">target memory data</param>
            <typeparam name="T">target type</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:RTCLib.Sys.MessageLogger">
            <summary>
            Logging class 
            </summary>
            
            Event logging class.
            
            Before starting a log,
            the device should be registered with notification level.
            All message has also a notification level.
            
            The message which has a higher notification level 
            than the devices' one sent to the device.
            
        </member>
        <member name="T:RTCLib.Sys.MessageLogger.LoggingLevel">
            <summary>
            Logging level
            </summary>
            If logging level of message is equal or large than
            device logging level, the message is sent to the device.
            
            Lowest(100) &lt; Low(200) &lt; Middle(300) &lt; High(400) &lt; Highest(500)
            or use int value.
        </member>
        <member name="F:RTCLib.Sys.MessageLogger.LoggingLevel.Lowest">
            <summary>Lowest log level for not important message</summary>
        </member>
        <member name="F:RTCLib.Sys.MessageLogger.LoggingLevel.Low">
            <summary>Lower log level for less important message</summary>
        </member>
        <member name="F:RTCLib.Sys.MessageLogger.LoggingLevel.Middle">
            <summary>Middle log level; base line</summary>
        </member>
        <member name="F:RTCLib.Sys.MessageLogger.LoggingLevel.High">
            <summary>High log level for more important message</summary>
        </member>
        <member name="F:RTCLib.Sys.MessageLogger.LoggingLevel.Highest">
            <summary>Highest log level for the most important message</summary>
        </member>
        <member name="T:RTCLib.Sys.MessageLogger.WriteLogDelegate">
            <summary>
            Delegate to write the log message to device.
            </summary>
            <param name="device">Device object as dynamic</param>
            <param name="message">Message to write</param>
            Registered devices are called as:
            WriteLogDelegate(device, message).
        </member>
        <member name="T:RTCLib.Sys.MessageLogger.TerminationDelegate">
            <summary>
            Delegate for device termination
            </summary>
            <param name="device">Device object as dynamic</param>
            This delegate is called when the logger is closed.
            If the device is inheriting IDisposable, Dispose()
            is also called when MessageLogger is disposed.
        </member>
        <member name="T:RTCLib.Sys.MessageLogger.LogDevice">
            <summary>
            
            </summary>
        </member>
        <member name="F:RTCLib.Sys.MessageLogger._isStopping">
            <summary>
            Is going to close logger
            </summary>
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.StartLog(System.Int32)">
            <summary>
            Initialization 
            </summary>
            <param name="interval">Interval to call </param>
            This method set the timer to call the procedure
            to output the log to device.
            If interval is negative, user have to call
            ProcessMessage() manually to output the log.
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.Terminate">
            <summary>
            Terminate logger system
            </summary>
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.WaitForLogComplete">
            <summary>
            Wait until all messages are processed.
            </summary>
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.TimerCallback(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Executed in other thread
            </summary>
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.ProcessMessage">
            <summary>
            Process message
            </summary>
            Output queued messages to the device
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.AddLogDevice(RTCLib.Sys.MessageLogger.LoggingLevel,System.Object,RTCLib.Sys.MessageLogger.WriteLogDelegate,RTCLib.Sys.MessageLogger.TerminationDelegate)">
             <summary>
             Add logging device class
             </summary>
             <param name="level">Logging level</param>
             <param name="dev">Device class as dynamic</param>
             <param name="writeDelegate">Delegate to write message to the device</param>
             <param name="termDelegate">Delegate to terminate the device</param>
            
             Set lower log level if you want to log less important messages.
             Set higher log level for digest to log only important messages.
            
             Terminanation delegate is called when the logger is terminated.
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.AddLog(System.String,RTCLib.Sys.MessageLogger.LoggingLevel)">
            <summary>
            Add the log message
            </summary>
            <param name="msg">Message to log</param>
            <param name="level">Logging levels of message</param>
            level 0 : show anyway
            level n : show message if n if g.e. than levels of device
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.Finalize">
            <inheritdoc />
        </member>
        <member name="M:RTCLib.Sys.MessageLogger.Dispose">
            <summary>
            Dispose unmanaged/managed resources
            </summary>
        </member>
    </members>
</doc>
